//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class SdfLayerHandleSet : global::System.IDisposable, global::System.Collections.Generic.ISet<SdfLayerHandle>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SdfLayerHandleSet(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfLayerHandleSet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SdfLayerHandleSet() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_SdfLayerHandleSet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  void global::System.Collections.Generic.ICollection<SdfLayerHandle>.Add(SdfLayerHandle item) {
      ((global::System.Collections.Generic.ISet<SdfLayerHandle>)this).Add(item);
  }

  public bool TryGetValue(SdfLayerHandle equalValue, out SdfLayerHandle actualValue) {
    try {
      actualValue = getitem(equalValue);
      return true;
    } catch {
      actualValue = default(SdfLayerHandle);
      return false;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public void CopyTo(SdfLayerHandle[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(SdfLayerHandle[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    foreach (SdfLayerHandle item in this) {
      array.SetValue(item, arrayIndex++);
    }
  }

  public void ExceptWith(global::System.Collections.Generic.IEnumerable<SdfLayerHandle> other) {
    foreach (SdfLayerHandle item in other) {
      Remove(item);
    }
  }

  public void IntersectWith(global::System.Collections.Generic.IEnumerable<SdfLayerHandle> other) {
    SdfLayerHandleSet old = new SdfLayerHandleSet(this);

    Clear();
    foreach (SdfLayerHandle item in other) {
      if (old.Contains(item))
        Add(item);
    }
  }

  private static int count_enum(global::System.Collections.Generic.IEnumerable<SdfLayerHandle> other) {
    int count = 0;
    foreach (SdfLayerHandle item in other) {
      count++;
    }

    return count;
  }

  public bool IsProperSubsetOf(global::System.Collections.Generic.IEnumerable<SdfLayerHandle> other) {
    return IsSubsetOf(other) && Count < count_enum(other);
  }

  public bool IsProperSupersetOf(global::System.Collections.Generic.IEnumerable<SdfLayerHandle> other) {
    return IsSupersetOf(other) && Count > count_enum(other);
  }

  public bool IsSubsetOf(global::System.Collections.Generic.IEnumerable<SdfLayerHandle> other) {
    int countContained = 0;

    foreach (SdfLayerHandle item in other) {
      if (Contains(item))
        countContained++;
    }

    return countContained == Count;
  }

  public bool IsSupersetOf(global::System.Collections.Generic.IEnumerable<SdfLayerHandle> other) {
    foreach (SdfLayerHandle item in other) {
      if (!Contains(item))
        return false;
    }

    return true;
  }

  public bool Overlaps(global::System.Collections.Generic.IEnumerable<SdfLayerHandle> other) {
    foreach (SdfLayerHandle item in other) {
      if (Contains(item))
        return true;
    }

    return false;
  }

  public bool SetEquals(global::System.Collections.Generic.IEnumerable<SdfLayerHandle> other) {
    return IsSupersetOf(other) && Count == count_enum(other);
  }

  public void SymmetricExceptWith(global::System.Collections.Generic.IEnumerable<SdfLayerHandle> other) {
    foreach (SdfLayerHandle item in other) {
      if (!Remove(item))
        Add(item);
    }
  }

  public void UnionWith(global::System.Collections.Generic.IEnumerable<SdfLayerHandle> other) {
    foreach (SdfLayerHandle item in other) {
      Add(item);
    }
  }

  private global::System.Collections.Generic.ICollection<SdfLayerHandle> Items {
    get {
      global::System.Collections.Generic.ICollection<SdfLayerHandle> items = new global::System.Collections.Generic.List<SdfLayerHandle>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          items.Add(get_next(iter));
        }
        destroy_iterator(iter);
      }
      return items;
    }
  }

  global::System.Collections.Generic.IEnumerator<SdfLayerHandle> global::System.Collections.Generic.IEnumerable<SdfLayerHandle>.GetEnumerator() {
    return new SdfLayerHandleSetEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new SdfLayerHandleSetEnumerator(this);
  }

  public SdfLayerHandleSetEnumerator GetEnumerator() {
    return new SdfLayerHandleSetEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class SdfLayerHandleSetEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<SdfLayerHandle>
  {
    private SdfLayerHandleSet collectionRef;
    private global::System.Collections.Generic.IList<SdfLayerHandle> ItemsCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public SdfLayerHandleSetEnumerator(SdfLayerHandleSet collection) {
      collectionRef = collection;
      ItemsCollection = new global::System.Collections.Generic.List<SdfLayerHandle>(collection.Items);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public SdfLayerHandle Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (SdfLayerHandle)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = ItemsCollection[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public SdfLayerHandleSet() : this(UsdCsPINVOKE.new_SdfLayerHandleSet__SWIG_0(), true) {
  }

  public SdfLayerHandleSet(SdfLayerHandleSet other) : this(UsdCsPINVOKE.new_SdfLayerHandleSet__SWIG_1(SdfLayerHandleSet.getCPtr(other)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = UsdCsPINVOKE.SdfLayerHandleSet_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = UsdCsPINVOKE.SdfLayerHandleSet_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    UsdCsPINVOKE.SdfLayerHandleSet_Clear(swigCPtr);
  }

  public bool Add(SdfLayerHandle item) {
    bool ret = UsdCsPINVOKE.SdfLayerHandleSet_Add(swigCPtr, SdfLayerHandle.getCPtr(item));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Contains(SdfLayerHandle item) {
    bool ret = UsdCsPINVOKE.SdfLayerHandleSet_Contains(swigCPtr, SdfLayerHandle.getCPtr(item));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Remove(SdfLayerHandle item) {
    bool ret = UsdCsPINVOKE.SdfLayerHandleSet_Remove(swigCPtr, SdfLayerHandle.getCPtr(item));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private SdfLayerHandle getitem(SdfLayerHandle item) {
    SdfLayerHandle ret = new SdfLayerHandle(UsdCsPINVOKE.SdfLayerHandleSet_getitem(swigCPtr, SdfLayerHandle.getCPtr(item)), false);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = UsdCsPINVOKE.SdfLayerHandleSet_create_iterator_begin(swigCPtr);
    return ret;
  }

  private SdfLayerHandle get_next(global::System.IntPtr swigiterator) {
    SdfLayerHandle ret = new SdfLayerHandle(UsdCsPINVOKE.SdfLayerHandleSet_get_next(swigCPtr, swigiterator), false);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    UsdCsPINVOKE.SdfLayerHandleSet_destroy_iterator(swigCPtr, swigiterator);
  }

}

}
