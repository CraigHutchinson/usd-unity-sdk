//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdLuxLightAPI : UsdAPISchemaBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdLuxLightAPI(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.UsdLuxLightAPI_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdLuxLightAPI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_UsdLuxLightAPI(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public UsdLuxLightAPI(UsdPrim prim) : this(UsdCsPINVOKE.new_UsdLuxLightAPI__SWIG_0(UsdPrim.getCPtr(prim)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdLuxLightAPI() : this(UsdCsPINVOKE.new_UsdLuxLightAPI__SWIG_1(), true) {
  }

  public UsdLuxLightAPI(UsdSchemaBase schemaObj) : this(UsdCsPINVOKE.new_UsdLuxLightAPI__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited) {
    TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdLuxLightAPI_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
    return ret;
  }

  public new static TfTokenVector GetSchemaAttributeNames() {
    TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdLuxLightAPI_GetSchemaAttributeNames__SWIG_1(), false);
    return ret;
  }

  public static UsdLuxLightAPI Get(UsdStageWeakPtr stage, SdfPath path) {
    UsdLuxLightAPI ret = new UsdLuxLightAPI(UsdCsPINVOKE.UsdLuxLightAPI_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CanApply(UsdPrim prim, /*cstype*/ out string whyNot) {
    bool ret = UsdCsPINVOKE.UsdLuxLightAPI_CanApply__SWIG_0(UsdPrim.getCPtr(prim), out whyNot);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CanApply(UsdPrim prim) {
    bool ret = UsdCsPINVOKE.UsdLuxLightAPI_CanApply__SWIG_1(UsdPrim.getCPtr(prim));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdLuxLightAPI Apply(UsdPrim prim) {
    UsdLuxLightAPI ret = new UsdLuxLightAPI(UsdCsPINVOKE.UsdLuxLightAPI_Apply(UsdPrim.getCPtr(prim)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute GetShaderIdAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_GetShaderIdAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateShaderIdAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateShaderIdAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateShaderIdAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateShaderIdAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateShaderIdAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateShaderIdAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetMaterialSyncModeAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_GetMaterialSyncModeAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateMaterialSyncModeAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateMaterialSyncModeAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateMaterialSyncModeAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateMaterialSyncModeAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateMaterialSyncModeAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateMaterialSyncModeAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetIntensityAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_GetIntensityAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateIntensityAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateIntensityAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateIntensityAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateIntensityAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateIntensityAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateIntensityAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetExposureAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_GetExposureAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateExposureAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateExposureAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateExposureAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateExposureAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateExposureAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateExposureAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetDiffuseAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_GetDiffuseAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateDiffuseAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateDiffuseAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateDiffuseAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateDiffuseAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateDiffuseAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateDiffuseAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetSpecularAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_GetSpecularAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateSpecularAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateSpecularAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateSpecularAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateSpecularAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateSpecularAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateSpecularAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetNormalizeAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_GetNormalizeAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateNormalizeAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateNormalizeAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateNormalizeAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateNormalizeAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateNormalizeAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateNormalizeAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetColorAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_GetColorAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateColorAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateColorAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateColorAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateColorAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateColorAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateColorAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetEnableColorTemperatureAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_GetEnableColorTemperatureAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateEnableColorTemperatureAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateEnableColorTemperatureAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateEnableColorTemperatureAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateEnableColorTemperatureAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateEnableColorTemperatureAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateEnableColorTemperatureAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetColorTemperatureAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_GetColorTemperatureAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateColorTemperatureAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateColorTemperatureAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateColorTemperatureAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateColorTemperatureAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateColorTemperatureAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateColorTemperatureAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdRelationship GetFiltersRel() {
    UsdRelationship ret = new UsdRelationship(UsdCsPINVOKE.UsdLuxLightAPI_GetFiltersRel(swigCPtr), true);
    return ret;
  }

  public UsdRelationship CreateFiltersRel() {
    UsdRelationship ret = new UsdRelationship(UsdCsPINVOKE.UsdLuxLightAPI_CreateFiltersRel(swigCPtr), true);
    return ret;
  }

  public UsdLuxLightAPI(UsdShadeConnectableAPI connectable) : this(UsdCsPINVOKE.new_UsdLuxLightAPI__SWIG_3(UsdShadeConnectableAPI.getCPtr(connectable)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdShadeConnectableAPI ConnectableAPI() {
    UsdShadeConnectableAPI ret = new UsdShadeConnectableAPI(UsdCsPINVOKE.UsdLuxLightAPI_ConnectableAPI(swigCPtr), true);
    return ret;
  }

  public UsdShadeOutput CreateOutput(TfToken name, SdfValueTypeName typeName) {
    UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdLuxLightAPI_CreateOutput(swigCPtr, TfToken.getCPtr(name), SdfValueTypeName.getCPtr(typeName)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeOutput GetOutput(TfToken name) {
    UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdLuxLightAPI_GetOutput(swigCPtr, TfToken.getCPtr(name)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeOutputVector GetOutputs(bool onlyAuthored) {
    UsdShadeOutputVector ret = new UsdShadeOutputVector(UsdCsPINVOKE.UsdLuxLightAPI_GetOutputs__SWIG_0(swigCPtr, onlyAuthored), true);
    return ret;
  }

  public UsdShadeOutputVector GetOutputs() {
    UsdShadeOutputVector ret = new UsdShadeOutputVector(UsdCsPINVOKE.UsdLuxLightAPI_GetOutputs__SWIG_1(swigCPtr), true);
    return ret;
  }

  public UsdShadeInput CreateInput(TfToken name, SdfValueTypeName typeName) {
    UsdShadeInput ret = new UsdShadeInput(UsdCsPINVOKE.UsdLuxLightAPI_CreateInput(swigCPtr, TfToken.getCPtr(name), SdfValueTypeName.getCPtr(typeName)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeInput GetInput(TfToken name) {
    UsdShadeInput ret = new UsdShadeInput(UsdCsPINVOKE.UsdLuxLightAPI_GetInput(swigCPtr, TfToken.getCPtr(name)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeInputVector GetInputs(bool onlyAuthored) {
    UsdShadeInputVector ret = new UsdShadeInputVector(UsdCsPINVOKE.UsdLuxLightAPI_GetInputs__SWIG_0(swigCPtr, onlyAuthored), true);
    return ret;
  }

  public UsdShadeInputVector GetInputs() {
    UsdShadeInputVector ret = new UsdShadeInputVector(UsdCsPINVOKE.UsdLuxLightAPI_GetInputs__SWIG_1(swigCPtr), true);
    return ret;
  }

  public UsdCollectionAPI GetLightLinkCollectionAPI() {
    UsdCollectionAPI ret = new UsdCollectionAPI(UsdCsPINVOKE.UsdLuxLightAPI_GetLightLinkCollectionAPI(swigCPtr), true);
    return ret;
  }

  public UsdCollectionAPI GetShadowLinkCollectionAPI() {
    UsdCollectionAPI ret = new UsdCollectionAPI(UsdCsPINVOKE.UsdLuxLightAPI_GetShadowLinkCollectionAPI(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetShaderIdAttrForRenderContext(TfToken renderContext) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_GetShaderIdAttrForRenderContext(swigCPtr, TfToken.getCPtr(renderContext)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateShaderIdAttrForRenderContext(TfToken renderContext, VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateShaderIdAttrForRenderContext__SWIG_0(swigCPtr, TfToken.getCPtr(renderContext), VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateShaderIdAttrForRenderContext(TfToken renderContext, VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateShaderIdAttrForRenderContext__SWIG_1(swigCPtr, TfToken.getCPtr(renderContext), VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateShaderIdAttrForRenderContext(TfToken renderContext) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightAPI_CreateShaderIdAttrForRenderContext__SWIG_2(swigCPtr, TfToken.getCPtr(renderContext)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TfToken GetShaderId(TfTokenVector renderContexts) {
    TfToken ret = new TfToken(UsdCsPINVOKE.UsdLuxLightAPI_GetShaderId(swigCPtr, TfTokenVector.getCPtr(renderContexts)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly UsdSchemaKind schemaKind = (UsdSchemaKind)UsdCsPINVOKE.UsdLuxLightAPI_schemaKind_get();
}

}
