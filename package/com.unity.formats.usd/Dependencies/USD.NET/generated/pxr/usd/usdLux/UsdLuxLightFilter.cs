//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdLuxLightFilter : UsdGeomXformable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdLuxLightFilter(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.UsdLuxLightFilter_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdLuxLightFilter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_UsdLuxLightFilter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public UsdLuxLightFilter(UsdPrim prim) : this(UsdCsPINVOKE.new_UsdLuxLightFilter__SWIG_0(UsdPrim.getCPtr(prim)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdLuxLightFilter() : this(UsdCsPINVOKE.new_UsdLuxLightFilter__SWIG_1(), true) {
  }

  public UsdLuxLightFilter(UsdSchemaBase schemaObj) : this(UsdCsPINVOKE.new_UsdLuxLightFilter__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited) {
    TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdLuxLightFilter_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
    return ret;
  }

  public new static TfTokenVector GetSchemaAttributeNames() {
    TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdLuxLightFilter_GetSchemaAttributeNames__SWIG_1(), false);
    return ret;
  }

  public new static UsdLuxLightFilter Get(UsdStageWeakPtr stage, SdfPath path) {
    UsdLuxLightFilter ret = new UsdLuxLightFilter(UsdCsPINVOKE.UsdLuxLightFilter_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdLuxLightFilter Define(UsdStageWeakPtr stage, SdfPath path) {
    UsdLuxLightFilter ret = new UsdLuxLightFilter(UsdCsPINVOKE.UsdLuxLightFilter_Define(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute GetShaderIdAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightFilter_GetShaderIdAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateShaderIdAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightFilter_CreateShaderIdAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateShaderIdAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightFilter_CreateShaderIdAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateShaderIdAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightFilter_CreateShaderIdAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdLuxLightFilter(UsdShadeConnectableAPI connectable) : this(UsdCsPINVOKE.new_UsdLuxLightFilter__SWIG_3(UsdShadeConnectableAPI.getCPtr(connectable)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdShadeConnectableAPI ConnectableAPI() {
    UsdShadeConnectableAPI ret = new UsdShadeConnectableAPI(UsdCsPINVOKE.UsdLuxLightFilter_ConnectableAPI(swigCPtr), true);
    return ret;
  }

  public UsdShadeOutput CreateOutput(TfToken name, SdfValueTypeName typeName) {
    UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdLuxLightFilter_CreateOutput(swigCPtr, TfToken.getCPtr(name), SdfValueTypeName.getCPtr(typeName)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeOutput GetOutput(TfToken name) {
    UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdLuxLightFilter_GetOutput(swigCPtr, TfToken.getCPtr(name)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeOutputVector GetOutputs(bool onlyAuthored) {
    UsdShadeOutputVector ret = new UsdShadeOutputVector(UsdCsPINVOKE.UsdLuxLightFilter_GetOutputs__SWIG_0(swigCPtr, onlyAuthored), true);
    return ret;
  }

  public UsdShadeOutputVector GetOutputs() {
    UsdShadeOutputVector ret = new UsdShadeOutputVector(UsdCsPINVOKE.UsdLuxLightFilter_GetOutputs__SWIG_1(swigCPtr), true);
    return ret;
  }

  public UsdShadeInput CreateInput(TfToken name, SdfValueTypeName typeName) {
    UsdShadeInput ret = new UsdShadeInput(UsdCsPINVOKE.UsdLuxLightFilter_CreateInput(swigCPtr, TfToken.getCPtr(name), SdfValueTypeName.getCPtr(typeName)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeInput GetInput(TfToken name) {
    UsdShadeInput ret = new UsdShadeInput(UsdCsPINVOKE.UsdLuxLightFilter_GetInput(swigCPtr, TfToken.getCPtr(name)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeInputVector GetInputs(bool onlyAuthored) {
    UsdShadeInputVector ret = new UsdShadeInputVector(UsdCsPINVOKE.UsdLuxLightFilter_GetInputs__SWIG_0(swigCPtr, onlyAuthored), true);
    return ret;
  }

  public UsdShadeInputVector GetInputs() {
    UsdShadeInputVector ret = new UsdShadeInputVector(UsdCsPINVOKE.UsdLuxLightFilter_GetInputs__SWIG_1(swigCPtr), true);
    return ret;
  }

  public UsdCollectionAPI GetFilterLinkCollectionAPI() {
    UsdCollectionAPI ret = new UsdCollectionAPI(UsdCsPINVOKE.UsdLuxLightFilter_GetFilterLinkCollectionAPI(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetShaderIdAttrForRenderContext(TfToken renderContext) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightFilter_GetShaderIdAttrForRenderContext(swigCPtr, TfToken.getCPtr(renderContext)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateShaderIdAttrForRenderContext(TfToken renderContext, VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightFilter_CreateShaderIdAttrForRenderContext__SWIG_0(swigCPtr, TfToken.getCPtr(renderContext), VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateShaderIdAttrForRenderContext(TfToken renderContext, VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightFilter_CreateShaderIdAttrForRenderContext__SWIG_1(swigCPtr, TfToken.getCPtr(renderContext), VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateShaderIdAttrForRenderContext(TfToken renderContext) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdLuxLightFilter_CreateShaderIdAttrForRenderContext__SWIG_2(swigCPtr, TfToken.getCPtr(renderContext)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TfToken GetShaderId(TfTokenVector renderContexts) {
    TfToken ret = new TfToken(UsdCsPINVOKE.UsdLuxLightFilter_GetShaderId(swigCPtr, TfTokenVector.getCPtr(renderContexts)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly UsdSchemaKind schemaKind = (UsdSchemaKind)UsdCsPINVOKE.UsdLuxLightFilter_schemaKind_get();
}

}
